class Solution:
    def longestPalindrome(self, s: str) -> str:
        length = len(s)
        if length == 1:
            return s
        if length == 0:
            return ""
        mid = 0
        x = 1
        longest = 0
        candidates = ""
        for mid in range(length):
            for x in range(1,length+1):
                if((mid - x >= 0) and (mid + x < length)):
                    if s[mid - x] != s[mid + x]:
                        break
                    potential = 2*x +1
                    if potential > longest:
                        longest = potential
                        candidates = s[mid - x:potential+mid-x]
        candidates_1 = ""    
        longest = 0
        for mid in range(length):
            for x in range(1,length+1):
                if((mid - x +1>= 0) and (mid + x < length)):
                    if s[mid - x+1] != s[mid + x]:
                        break
                    potential = 2*x 
                    if potential > longest:
                        longest = potential
                        candidates_1 = s[mid - x+1:longest + mid - x + 1]
                        
        if len(candidates) > len(candidates_1):
            return candidates
        elif len(candidates) == len(candidates_1) and candidates == "":
            return s[0]
        else:
            return candidates_1
        
        
                        
        
            
        
